import java.util.Collection;
import java.util.Iterator;
import java.util.ArrayList;

public class TwoFourTree<T extends Comparable<T>> implements Collection<T> {
    private Node<T> root = new Node<>();
    private int size = 0;

    public void split(Node<T> thisNode) 
    {
        DataItem<T> itemB, itemC;
        Node<T> parent, child2, child3;
        int itemIndex;

        itemC = thisNode.removeItem();
        itemB = thisNode.removeItem();
        child2 = thisNode.disconnectChild(2);
        child3 = thisNode.disconnectChild(3);
        Node<T> newRight = new Node<>();

        if (thisNode == root)
        {
            root = new Node<>();
            parent = root;
            root.connectChild(0, thisNode);
        } else
            parent = thisNode.getParent();

        itemIndex = parent.insertItem(itemB);
        int n = parent.getNumItems();

        for (int j = n - 1; j > itemIndex; j--) 
        {
            Node<T> temp = parent.disconnectChild(j);
            parent.connectChild(j + 1, temp);

        }
        parent.connectChild(itemIndex + 1, newRight);

        newRight.insertItem(itemC);
        newRight.connectChild(0, child2);
        newRight.connectChild(1, child3);
    }

    public Node<T> getNextChild(Node<T> theNode, T theValue) {
        int j; 
        int numItems = theNode.getNumItems();
        for (j = 0; j < numItems; j++) {
            if (theValue.compareTo(theNode.getItem(j).dData) < 0)
                return theNode.getChild(j);
        }
        return theNode.getChild(j);
    }

    public int find(T key) {
        Node<T> curNode = root;
        int childNumber;
        while (true) {
            if ((childNumber = curNode.findItem(key)) != -1)
                return childNumber;
            else if (curNode.isLeaf())
                return -1; 
            else
                curNode = getNextChild(curNode, key);
        }
    }
    

    public void insert(T dValue) {
        Node<T> curNode = root;
        DataItem<T> tempItem = new DataItem<T>(dValue);
        while (true) {
            if (curNode.isFull())
            {
                split(curNode);
                curNode = curNode.getParent();
                curNode = getNextChild(curNode, dValue);
            } else if (curNode.isLeaf())
                break;
            else
                curNode = getNextChild(curNode, dValue);

        }

        curNode.insertItem(tempItem);
        size++;
    }


    private void recDisplayTree(Node<T> thisNode, int level, int childNumber) {
        System.out.print("level=" + level + "; child=" + childNumber + " ");
        thisNode.displayNode();

        int numItems = thisNode.getNumItems();
        for (int j = 0; j < numItems + 1; j++) {
            Node<T> nextNode = thisNode.getChild(j);
            if (nextNode != null)
                recDisplayTree(nextNode, level + 1, j);
            else
                return;
        }

    }


    public void displayTree() {
        recDisplayTree(root, 0, 0);
    }


    @Override
    public int size() {
        return size;
    }

    @Override
    public boolean isEmpty() {
        return size == 0;
    }

    @Override
    public boolean contains(Object o) {
        try {
            return find((T) o) == -1;
        } catch (ClassCastException exception) {
            return false;
        }
    }

    @Override
    public Iterator<T> iterator() {
        return null;
    }

    @Override
    public Object[] toArray() {
        return new Object[0];
    }

    @Override
    public <T1> T1[] toArray(T1[] a) {
        return null;
    }

    @Override
    public boolean add(T t) {
        insert(t);
        return true;
    }

    @Override
    public boolean remove(Object o) {
        return false;
    }

    @Override
    public boolean containsAll(Collection<?> c) {
        Iterator<?> iterator = c.iterator();
        while (iterator.hasNext()) {
            Object o = iterator.next();
            if (!this.contains(o)) return false;
        }
        return true;
    }

    @Override
    public boolean addAll(Collection<? extends T> c) {
        Iterator<? extends T> iterator = c.iterator();
        while (iterator.hasNext()) {
            T o = iterator.next();
            try {
                this.add((T)o);
            } catch (ClassCastException ignored) {
            }
        }
        return true;
    }

    @Override
    public boolean removeAll(Collection<?> c) {
        return false;
    }

    @Override
    public boolean retainAll(Collection<?> c) {
        return false;
    }

    @Override
    public void clear() {

    }
}
class DataItem<T extends Comparable<T>> {
    public T dData;

    public DataItem(T dd) {
        dData = dd;
    }

    public void displayItem() {
        System.out.print("/" + dData);
    }

}

class Node<T extends Comparable<T>> {

    private static final int ORDER = 4;
    private Node<T> parent;
    private int numItems;
    private ArrayList<Node<T>> children = new ArrayList<>(ORDER);
    private ArrayList<DataItem<T>> items = new ArrayList<>(ORDER - 1); 
                                                                       

    public Node() {
        for (int i = 0; i < ORDER; i++)
            children.add(i, null);
        for (int i = 0; i < ORDER - 1; i++)
            items.add(i, null);
    }

    public void connectChild(int childNum, Node<T> child) {
        children.set(childNum, child);
        if (child != null)
            child.parent = this;
    }

    public Node<T> disconnectChild(int childNum) {
        Node<T> tempNode = children.get(childNum);
        children.set(childNum, null);
        return tempNode;
    }

    public Node<T> getChild(int childNum) {
        return children.get(childNum);
    }

    public Node<T> getParent() {
        return parent;
    }

    public boolean isLeaf() {
        return (children.get(0) == null);
    }

    public int getNumItems() {
        return numItems;
    }

    public DataItem<T> getItem(int index) {
        return items.get(index);
    }

    public boolean isFull() {
        return (numItems == ORDER - 1);
    }

    public int findItem(Object key) {
        for (int j = 0; j < ORDER - 1; j++) {
            if (items.get(j) == null)
                break;
            else if (items.get(j).dData.equals(key))
                return j;
        }
        return -1;
    }

    public int insertItem(DataItem<T> newItem) {
        numItems++;
        T newKey = newItem.dData;

        for (int j = ORDER - 2; j >= 0; j--) {
                                             
            if (items.get(j) != null)
            {
                T itsKey = items.get(j).dData;
                if (newKey.compareTo(itsKey) < 0)
                    items.set(j + 1, items.get(j));
                else {
                    items.set(j + 1, newItem);
                    return j + 1;
                }
            }
        }
        items.set(0, newItem);
        return 0;
    }

    public DataItem<T> removeItem() {
        DataItem<T> temp = items.get(numItems - 1);
        items.set(numItems - 1, null);
        numItems--;
        return temp;
    }

    public void displayNode() {
        for (int j = 0; j < numItems; j++)
            items.get(j).displayItem();
        System.out.println("/");
    }
}
